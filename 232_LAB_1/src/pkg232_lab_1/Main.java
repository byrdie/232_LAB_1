
        
package pkg232_lab_1;

import java.util.Random;
/**
 *class main fill a binary search tree with random numbers,
 * and then traverses the tree using inorder, preorder, and postorder
 * traversing. main then prints the results of the traverse.
 * @author Roy
 */

public class Main {
    
    static int treeLength = 25;
    static Random generator = new Random();
    static int[] preorder = new int[treeLength + 2];
    static int[] inorder = new int[treeLength + 2];
    static int[] postorder = new int[treeLength + 2];
    static int max = 100;   //maximum number generated by RNG
    
    public static void main(String[] args) {
        Element elem = createElement();
        Tree maple = new Tree(elem);
        
        /*set the first value as an index variable of the array to be passed by recursive call*/
        preorder[0] = 1;
        inorder[0] = 1;
        postorder[0] = 1;
        
        
        fillTree(maple);
        Node root = maple.getRoot();
        maple.preorder(root, preorder);
        maple.inorder(root, inorder);
        maple.postorder(root, postorder);
        
        printTree();
    }
    
    static public void fillTree(Tree tree){
        Node root = tree.getRoot();
        for(int i = 0; i < treeLength; i++){
            Node data = createNode();
            tree.insert(data, root);
        }
    }
    
    static public Node createNode(){
        int num = generator.nextInt(max);
            Element elem = new Element(num , null);
            Node data = new Node(elem);
            return data;
    }
    
    static public Element createElement(){
        int num = generator.nextInt(max);
            Element elem = new Element(num , "s");
            return elem;
    }
    
    static void printTree(){
        String template = "                             ";
        char[] charArray = template.toCharArray();  //use char array to set margins of outputs
        System.out.println("Preorder   Inorder   Postorder");
        for(int i = 1; i < treeLength + 1; i++){
            char[] preValue = (preorder[i] + "  ").toCharArray();
            char[] inValue = (inorder[i] + "  ").toCharArray();
            char[] postValue = (postorder[i] + "  ").toCharArray();
            
            /*set values to indexes of margins*/
            charArray[0] = preValue[0];
            charArray[1] = preValue[1];
            charArray[2] = preValue[2];
            charArray[11] = inValue[0];
            charArray[12] = inValue[1];
            charArray[13] = inValue[2];
            charArray[21] = postValue[0];
            charArray[22] = preValue[1];
            charArray[23] = preValue[2];
            
            System.out.println(charArray);
        }
        
        
    }
}
